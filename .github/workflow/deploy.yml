name: Team2 Frontend Auto Deploy

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Dockerfile에 작성된 내용을 바탕으로 이미지 push
  push_to_registry:
    name: Push to NCP container registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # CI 서버(unbuntu-latest)에 현재 해당 branch에 있는 코드를 가져온다
        uses: actions/checkout@v3    
      - name: Set up Docker Buildx
        # 멀티 아키텍처 플랫폼(amd64, arm64 등) 지원
        uses: docker/setup-buildx-action@v2
      # NCP
      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      - name: build and push
        # Dockerfile에 작성된 내용으로 이미지 빌드, registry에 push
        uses: docker/build-push-action@v3
        with:
          # context: 이미지가 빌드되어야 하는 root 위치
          context: .
          # file: dockerfile이 존재하는 위치
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}/team2-fe-docker:latest
          # docker image 빌드마다 패키지 설치로 인해 걸리는 시간 캐싱
          cache-from: type=registry,ref=${{ secrets.NCP_CONTAINER_REGISTRY }}/prv-frontend:latest
          cache-to: type=inline
          # private repository 안에서 action이 실행될 경우 필요
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GIT_TOKEN }}

  # 배포 서버에서 이미지 pull하기
  pull_from_registry:
    name: Connect server ssh and pull from container registry
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: Connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            docker login --username=${{ secrets.NCP_ACCESS_KEY }} --password=${{ secrets.NCP_SECRET_KEY }} hackathon-team2.ncr.fin-ntruss.com 
            docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/team2-fe-docker
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker run -d --name kosinfo-server -p 80:3000 ${{ secrets.NCP_CONTAINER_REGISTRY }}/team2-fe-docker
            docker image prune -f
            
